str = "C语言中文网"
print(str[0], "==", str[-6])
print(str[5], "==", str[-1])

'''
切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列。

序列实现切片操作的语法格式如下：
sname[start : end : step]

其中，各个参数的含义分别是：
sname：表示序列的名称；
start：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；
end：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；
step：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果 step 的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置 step 的值，则最后一个冒号就可以省略。
'''
print(str[:2])
print(str[::2])
print(str[:])
print('---------------------------------------------------------------------------------')
'''
序列相加
Python 中，支持两种类型相同的序列使用“+”运算符做相加操作，它会将两个序列进行连接，但不会去除重复的元素。
这里所说的“类型相同”，指的是“+”运算符的两侧序列要么都是列表类型，要么都是元组类型，要么都是字符串。
例如，前面章节中我们已经实现用“+”运算符连接 2 个（甚至多个）字符串，如下所示：
str="c.biancheng.net"
print("C语言"+"中文网:"+str)
输出结果为：
C语言中文网：c.biancheng.net
'''
# =========================================================================================
t1 = (1, 2, 3)
t2 = (2, 3, 4)
print(t1 + t2)
print(t1 * 3)
print(str * 3)
'''
序列相乘
Python 中，使用数字 n 乘以一个序列会生成新的序列，其内容为原来序列被重复 n 次的结果。例如：
str="C语言中文网"
print(str*3)
输出结果为：
'C语言中文网C语言中文网C语言中文网'


比较特殊的是，列表类型在进行乘法运算时，还可以实现初始化指定长度列表的功能。例如如下的代码，将创建一个长度为 5 的列表，列表中的每个元素都是 None，表示什么都没有。
#列表的创建用 []，后续讲解列表时会详细介绍
list = [None]*5
print(list)
输出结果为：
[None, None, None, None, None]

'''
list0 = [None] * 5
print(list0)
# ===================================================================================
'''
检查元素是否包含在序列中
Python 中，可以使用 in 关键字检查某元素是否为序列的成员，其语法格式为：
value in sequence

其中，value 表示要检查的元素，sequence 表示指定的序列。

例如，检查字符‘c’是否包含在字符串“c.biancheng.net”中，可以执行如下代码：
str="c.biancheng.net"
print('c'in str)
运行结果为：
True

和 in 关键字用法相同，但功能恰好相反的，还有 not in 关键字，它用来检查某个元素是否不包含在指定的序列中，比如说：
str="c.biancheng.net"
print('c' not in str)
输出结果为：
False
'''

str = "c.biancheng.net"
print('ian' in str)

'''
和序列相关的内置函数
Python提供了几个内置函数（表 3 所示），可用于实现与序列相关的一些常用操作。

表 3 序列相关的内置函数
函数	功能
len()	计算序列的长度，即返回序列中包含多少个元素。
max()	找出序列中的最大元素。注意，对序列使用 sum() 函数时，做加和操作的必须都是数字，不能是字符或字符串，否则该函数将抛出异常，因为解释器无法判定是要做连接操作（+ 运算符可以连接两个序列），还是做加和操作。
min()	找出序列中的最小元素。
list()	将序列转换为列表。
str()	将序列转换为字符串。
sum()	计算元素和。
sorted()	对元素进行排序。
reversed()	反向序列中的元素。
enumerate()	将序列组合为一个索引序列，多用在 for 循环中。
'''

list1 = [1, 2, 3, 4, 5]
str = "hello"
str1 = "123"
print("len:", len(str))
print("len:", len(list0))
print("max", max(str))
print("max", max(list1))
print("min", min(str))

t3 = (1, 2, 3)
str1 = "world"
print("======================================")
print("list", list(str1))
print("sum", sum(list1))
print("sort",sorted(str1))
